// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Requestnet.Infrastructure.Data;

namespace Requestnet.Infrastructure.Data.Migrations
{
    [DbContext(typeof(RequestnetDbContext))]
    [Migration("20201214150215_InitialModel")]
    partial class InitialModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Requestnet.Core.Domain.Casos", b =>
                {
                    b.Property<int>("IdCaso")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_caso")
                        .HasColumnType("int(11)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnName("fecha_creacion")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaSol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fecha_sol")
                        .HasColumnType("date")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int>("IdCliente")
                        .HasColumnName("id_cliente")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdEstado")
                        .HasColumnName("id_estado")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdJefe")
                        .HasColumnName("id_jefe")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdLider")
                        .HasColumnName("id_lider")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdTecnico")
                        .HasColumnName("id_tecnico")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdTipoCaso")
                        .HasColumnName("id_tipo_caso")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Notas")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("notas")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Solucion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("solucion")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("IdCaso")
                        .HasName("PRIMARY");

                    b.HasIndex("IdCliente")
                        .HasName("fk_id_cliente");

                    b.HasIndex("IdEstado")
                        .HasName("id_estado");

                    b.HasIndex("IdJefe")
                        .HasName("id_jefe");

                    b.HasIndex("IdLider")
                        .HasName("id_lider");

                    b.HasIndex("IdTecnico")
                        .HasName("id_tecnico");

                    b.HasIndex("IdTipoCaso")
                        .HasName("id_tipo_caso");

                    b.ToTable("casos");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Ciudades", b =>
                {
                    b.Property<int>("IdCiudad")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_ciudad")
                        .HasColumnType("int(11)");

                    b.HasKey("IdCiudad")
                        .HasName("PRIMARY");

                    b.ToTable("ciudades");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.EstadoEq", b =>
                {
                    b.Property<int>("IdEstadoeq")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_estadoeq")
                        .HasColumnType("int(11)");

                    b.HasKey("IdEstadoeq")
                        .HasName("PRIMARY");

                    b.ToTable("estado_eq");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Estados", b =>
                {
                    b.Property<int>("IdEstado")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_estado")
                        .HasColumnType("int(11)");

                    b.HasKey("IdEstado")
                        .HasName("PRIMARY");

                    b.ToTable("estados");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.EstadosRu", b =>
                {
                    b.Property<int>("IdEstadoru")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_estadoru")
                        .HasColumnType("int(11)");

                    b.HasKey("IdEstadoru")
                        .HasName("PRIMARY");

                    b.ToTable("estados_ru");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.IntegranteColaborador", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_cliente")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdUsuario")
                        .HasColumnName("id_usuario")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("IdCliente")
                        .HasName("PRIMARY");

                    b.HasIndex("IdUsuario")
                        .HasName("id_usuario");

                    b.ToTable("integrante_colaborador");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.InventarioEquipos", b =>
                {
                    b.Property<int>("IdEquipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_equipo")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdCliente")
                        .HasColumnName("id_cliente")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdEstadoeq")
                        .HasColumnName("id_estadoeq")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdJefe")
                        .HasColumnName("id_jefe")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdLider")
                        .HasColumnName("id_lider")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdMarca")
                        .HasColumnName("id_marca")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdTipoComponente")
                        .HasColumnName("id_tipo_componente")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdTipoProcedencia")
                        .HasColumnName("id_tipo_procedencia")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnName("serial")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("IdEquipo")
                        .HasName("PRIMARY");

                    b.HasIndex("IdCliente")
                        .HasName("id_cliente");

                    b.HasIndex("IdEstadoeq")
                        .HasName("id_estadoeq");

                    b.HasIndex("IdJefe")
                        .HasName("id_jefe");

                    b.HasIndex("IdLider")
                        .HasName("id_lider");

                    b.HasIndex("IdMarca")
                        .HasName("id_marca");

                    b.HasIndex("IdTipoComponente")
                        .HasName("id_tipo_componente");

                    b.HasIndex("IdTipoProcedencia")
                        .HasName("id_tipo_procedencia");

                    b.ToTable("inventario_equipos");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Jefeinfraestructura", b =>
                {
                    b.Property<int>("IdJefe")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_jefe")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdUsuario")
                        .HasColumnName("id_usuario")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("IdJefe")
                        .HasName("PRIMARY");

                    b.HasIndex("IdUsuario")
                        .HasName("id_usuario");

                    b.ToTable("jefeinfraestructura");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Liderinventario", b =>
                {
                    b.Property<int>("IdLider")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_lider")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdUsuario")
                        .HasColumnName("id_usuario")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("IdLider")
                        .HasName("PRIMARY");

                    b.HasIndex("IdUsuario")
                        .HasName("id_usuario");

                    b.ToTable("liderinventario");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Marca", b =>
                {
                    b.Property<int>("IdMarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_marca")
                        .HasColumnType("int(11)");

                    b.HasKey("IdMarca")
                        .HasName("PRIMARY");

                    b.ToTable("marca");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Orden", b =>
                {
                    b.Property<int>("IdOrden")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_orden")
                        .HasColumnType("int(11)");

                    b.Property<byte[]>("AdjuntarArchivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("adjuntar_archivo")
                        .HasColumnType("blob")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaAprobacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fecha_aprobacion")
                        .HasColumnType("date")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime?>("FechaSolucion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fecha_solucion")
                        .HasColumnType("date")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdEstado")
                        .HasColumnName("id_estado")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdJefe")
                        .HasColumnName("id_jefe")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdLider")
                        .HasColumnName("id_lider")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdProveedor")
                        .HasColumnName("id_proveedor")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdTipoOrden")
                        .HasColumnName("id_tipo_orden")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Notas")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("notas")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Solucion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("solucion")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("IdOrden")
                        .HasName("PRIMARY");

                    b.HasIndex("IdEstado")
                        .HasName("id_estado");

                    b.HasIndex("IdJefe")
                        .HasName("id_jefe");

                    b.HasIndex("IdLider")
                        .HasName("id_lider");

                    b.HasIndex("IdProveedor")
                        .HasName("id_proveedor");

                    b.HasIndex("IdTipoOrden")
                        .HasName("id_tipo_orden");

                    b.ToTable("orden");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Proveedores", b =>
                {
                    b.Property<int>("IdProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_proveedor")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdUsuario")
                        .HasColumnName("id_usuario")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("IdProveedor")
                        .HasName("PRIMARY");

                    b.HasIndex("IdUsuario")
                        .HasName("id_usuario");

                    b.ToTable("proveedores");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Roles", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_rol")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdEstadoru")
                        .HasColumnName("id_estadoru")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("NombreRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nombre_rol")
                        .HasColumnType("varchar(30)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(30);

                    b.HasKey("IdRol")
                        .HasName("PRIMARY");

                    b.HasIndex("IdEstadoru")
                        .HasName("id_estadoru");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Tecnico", b =>
                {
                    b.Property<int>("IdTecnico")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_tecnico")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdUsuario")
                        .HasColumnName("id_usuario")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("IdTecnico")
                        .HasName("PRIMARY");

                    b.HasIndex("IdUsuario")
                        .HasName("id_usuario");

                    b.ToTable("tecnico");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.TipoCaso", b =>
                {
                    b.Property<int>("IdTipoCaso")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_tipo_caso")
                        .HasColumnType("int(11)");

                    b.HasKey("IdTipoCaso")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_caso");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.TipoComponente", b =>
                {
                    b.Property<int>("IdTipoComponente")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_tipo_componente")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Cantidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cantidad")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("IdTipoComponente")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_componente");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.TipoDoc", b =>
                {
                    b.Property<int>("IdTipdoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_tipdoc")
                        .HasColumnType("int(11)");

                    b.HasKey("IdTipdoc")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_doc");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.TipoOrden", b =>
                {
                    b.Property<int>("IdTipoOrden")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_tipo_orden")
                        .HasColumnType("int(11)");

                    b.HasKey("IdTipoOrden")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_orden");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.TipoProcedencia", b =>
                {
                    b.Property<int>("IdTipoProcedencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_tipo_procedencia")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdOrden")
                        .HasColumnName("id_orden")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("IdTipoProcedencia")
                        .HasName("PRIMARY");

                    b.HasIndex("IdOrden")
                        .HasName("id_orden");

                    b.ToTable("tipo_procedencia");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Usuarios", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_usuario")
                        .HasColumnType("int(11)");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnName("apellidos")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnName("cargo")
                        .HasColumnType("varchar(55)")
                        .HasMaxLength(55);

                    b.Property<string>("Contraseña")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contraseña")
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(15);

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnName("correo")
                        .HasColumnType("varchar(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnName("direccion")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("FechaIngresoCom")
                        .HasColumnName("fecha_ingreso_com")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaNacimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fecha_nacimiento")
                        .HasColumnType("date")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdCiudad")
                        .HasColumnName("id_ciudad")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdEstadoru")
                        .HasColumnName("id_estadoru")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdRol")
                        .HasColumnName("id_rol")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("IdTipdoc")
                        .HasColumnName("id_tipdoc")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnName("nombres")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("NumDocumento")
                        .HasColumnName("num_documento")
                        .HasColumnType("int(11)");

                    b.Property<long>("Telefono")
                        .HasColumnName("telefono")
                        .HasColumnType("bigint(20)");

                    b.HasKey("IdUsuario")
                        .HasName("PRIMARY");

                    b.HasIndex("IdCiudad")
                        .HasName("id_ciudad");

                    b.HasIndex("IdEstadoru")
                        .HasName("id_estadoru");

                    b.HasIndex("IdRol")
                        .HasName("id_rol");

                    b.HasIndex("IdTipdoc")
                        .HasName("id_tipdoc");

                    b.HasIndex("NumDocumento")
                        .IsUnique()
                        .HasName("num_documento");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Casos", b =>
                {
                    b.HasOne("Requestnet.Core.Domain.IntegranteColaborador", "IdClienteNavigation")
                        .WithMany("Casos")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("fk_id_cliente")
                        .IsRequired();

                    b.HasOne("Requestnet.Core.Domain.Estados", "IdEstadoNavigation")
                        .WithMany("Casos")
                        .HasForeignKey("IdEstado")
                        .HasConstraintName("casos_ibfk_5");

                    b.HasOne("Requestnet.Core.Domain.Jefeinfraestructura", "IdJefeNavigation")
                        .WithMany("Casos")
                        .HasForeignKey("IdJefe")
                        .HasConstraintName("casos_ibfk_3");

                    b.HasOne("Requestnet.Core.Domain.Liderinventario", "IdLiderNavigation")
                        .WithMany("Casos")
                        .HasForeignKey("IdLider")
                        .HasConstraintName("casos_ibfk_4");

                    b.HasOne("Requestnet.Core.Domain.Tecnico", "IdTecnicoNavigation")
                        .WithMany("Casos")
                        .HasForeignKey("IdTecnico")
                        .HasConstraintName("casos_ibfk_2");

                    b.HasOne("Requestnet.Core.Domain.TipoCaso", "IdTipoCasoNavigation")
                        .WithMany("Casos")
                        .HasForeignKey("IdTipoCaso")
                        .HasConstraintName("casos_ibfk_1");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.IntegranteColaborador", b =>
                {
                    b.HasOne("Requestnet.Core.Domain.Usuarios", "IdUsuarioNavigation")
                        .WithMany("IntegranteColaborador")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("integrante_colaborador_ibfk_1");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.InventarioEquipos", b =>
                {
                    b.HasOne("Requestnet.Core.Domain.IntegranteColaborador", "IdClienteNavigation")
                        .WithMany("InventarioEquipos")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("inventario_equipos_ibfk_1");

                    b.HasOne("Requestnet.Core.Domain.EstadoEq", "IdEstadoeqNavigation")
                        .WithMany("InventarioEquipos")
                        .HasForeignKey("IdEstadoeq")
                        .HasConstraintName("inventario_equipos_ibfk_7");

                    b.HasOne("Requestnet.Core.Domain.Jefeinfraestructura", "IdJefeNavigation")
                        .WithMany("InventarioEquipos")
                        .HasForeignKey("IdJefe")
                        .HasConstraintName("inventario_equipos_ibfk_5");

                    b.HasOne("Requestnet.Core.Domain.Liderinventario", "IdLiderNavigation")
                        .WithMany("InventarioEquipos")
                        .HasForeignKey("IdLider")
                        .HasConstraintName("inventario_equipos_ibfk_6");

                    b.HasOne("Requestnet.Core.Domain.Marca", "IdMarcaNavigation")
                        .WithMany("InventarioEquipos")
                        .HasForeignKey("IdMarca")
                        .HasConstraintName("inventario_equipos_ibfk_3");

                    b.HasOne("Requestnet.Core.Domain.TipoComponente", "IdTipoComponenteNavigation")
                        .WithMany("InventarioEquipos")
                        .HasForeignKey("IdTipoComponente")
                        .HasConstraintName("inventario_equipos_ibfk_2");

                    b.HasOne("Requestnet.Core.Domain.TipoProcedencia", "IdTipoProcedenciaNavigation")
                        .WithMany("InventarioEquipos")
                        .HasForeignKey("IdTipoProcedencia")
                        .HasConstraintName("inventario_equipos_ibfk_4");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Jefeinfraestructura", b =>
                {
                    b.HasOne("Requestnet.Core.Domain.Usuarios", "IdUsuarioNavigation")
                        .WithMany("Jefeinfraestructura")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("jefeinfraestructura_ibfk_1");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Liderinventario", b =>
                {
                    b.HasOne("Requestnet.Core.Domain.Usuarios", "IdUsuarioNavigation")
                        .WithMany("Liderinventario")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("liderinventario_ibfk_1");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Orden", b =>
                {
                    b.HasOne("Requestnet.Core.Domain.Estados", "IdEstadoNavigation")
                        .WithMany("Orden")
                        .HasForeignKey("IdEstado")
                        .HasConstraintName("orden_ibfk_5");

                    b.HasOne("Requestnet.Core.Domain.Jefeinfraestructura", "IdJefeNavigation")
                        .WithMany("Orden")
                        .HasForeignKey("IdJefe")
                        .HasConstraintName("orden_ibfk_3");

                    b.HasOne("Requestnet.Core.Domain.Liderinventario", "IdLiderNavigation")
                        .WithMany("Orden")
                        .HasForeignKey("IdLider")
                        .HasConstraintName("orden_ibfk_2");

                    b.HasOne("Requestnet.Core.Domain.Proveedores", "IdProveedorNavigation")
                        .WithMany("Orden")
                        .HasForeignKey("IdProveedor")
                        .HasConstraintName("orden_ibfk_1");

                    b.HasOne("Requestnet.Core.Domain.TipoOrden", "IdTipoOrdenNavigation")
                        .WithMany("Orden")
                        .HasForeignKey("IdTipoOrden")
                        .HasConstraintName("orden_ibfk_4");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Proveedores", b =>
                {
                    b.HasOne("Requestnet.Core.Domain.Usuarios", "IdUsuarioNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("proveedores_ibfk_1");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Roles", b =>
                {
                    b.HasOne("Requestnet.Core.Domain.EstadosRu", "IdEstadoruNavigation")
                        .WithMany("Roles")
                        .HasForeignKey("IdEstadoru")
                        .HasConstraintName("roles_ibfk_1");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Tecnico", b =>
                {
                    b.HasOne("Requestnet.Core.Domain.Usuarios", "IdUsuarioNavigation")
                        .WithMany("Tecnico")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("tecnico_ibfk_1");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.TipoProcedencia", b =>
                {
                    b.HasOne("Requestnet.Core.Domain.Orden", "IdOrdenNavigation")
                        .WithMany("TipoProcedencia")
                        .HasForeignKey("IdOrden")
                        .HasConstraintName("tipo_procedencia_ibfk_1");
                });

            modelBuilder.Entity("Requestnet.Core.Domain.Usuarios", b =>
                {
                    b.HasOne("Requestnet.Core.Domain.Ciudades", "IdCiudadNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdCiudad")
                        .HasConstraintName("usuarios_ibfk_3");

                    b.HasOne("Requestnet.Core.Domain.EstadosRu", "IdEstadoruNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdEstadoru")
                        .HasConstraintName("usuarios_ibfk_4");

                    b.HasOne("Requestnet.Core.Domain.Roles", "IdRolNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("usuarios_ibfk_1");

                    b.HasOne("Requestnet.Core.Domain.TipoDoc", "IdTipdocNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdTipdoc")
                        .HasConstraintName("usuarios_ibfk_2");
                });
#pragma warning restore 612, 618
        }
    }
}
